<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu云服务器安装配置mysql-server</title>
      <link href="2021/04/25/mysql-server/"/>
      <url>2021/04/25/mysql-server/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>一个刚租下来的ubuntu云服务器（阿里云等）</li><li>可以连接云服务器终端的工具（Xshell等）</li></ul><h2 id="教程环境"><a href="#教程环境" class="headerlink" title="教程环境"></a>教程环境</h2><ul><li>云服务器：1核心2g内存、1m带宽、ubuntu18.0.4x64为了教程重置了的纯净系统</li><li>远程连接工具：Xshell7</li></ul><h2 id="连接服务器终端"><a href="#连接服务器终端" class="headerlink" title="连接服务器终端"></a>连接服务器终端</h2><p><strong>1. 查看你云服务器实例的==公网ip==，带“公的”。</strong></p><p>如下图，我的是175.27.231.18。</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425171500.png" alt="查看ip"></p><p><strong>2. 使用连接工具连接后，输入用户和密码登录，Xshell连接方式过程如下：</strong></p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425171945.png" alt="Xshell连接"></p><p>SSH默认是22端口。</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425172050.png" alt="账号"></p><p>然后在接下来弹出的窗口输入密码，成功连接。</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425172223.png" alt="ubuntu连接成功"></p><h1 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h1><h2 id="安装mysql-server-1"><a href="#安装mysql-server-1" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h2><p><strong>4. 在终端输入以下内容来安装mysql-server。</strong></p><blockquote><p>sudo apt install mysql-server</p></blockquote><p>安装程序会自动安装mysql-server以及所有依赖项。</p><h2 id="设置mysql-server"><a href="#设置mysql-server" class="headerlink" title="设置mysql-server"></a>设置mysql-server</h2><p>在安装完成后，你需要设置mysql的root用户密码，以及做一些相关设置。</p><p><strong>5. 在终端输入以下命令来根据程序对你的引导完成==root密码设置==以及其它相关设置</strong></p><blockquote><p>sudo mysql_secure_installation utility</p></blockquote><p>这里解释一个除了密码设置以外重要的选项：</p><blockquote><p>Disallow root login remotely? (Press y|Y for Yes, any other key for No) :</p><p>是否禁用root用户远程连接，这条设置如果填写y，将会禁用远程主机使用root用户登录数据库。</p></blockquote><h2 id="mysql-service管理指令"><a href="#mysql-service管理指令" class="headerlink" title="mysql-service管理指令"></a>mysql-service管理指令</h2><p><strong>6. (可选) 测试mysql的安装情况</strong></p><p>使用下面的指令来测试，都是在终端窗口输入的用于管理mysql服务的指令：</p><blockquote><p>systemctl status mysql 或者 service mysql status</p></blockquote><p>查看mysql server的运行状态，active表示已经激活</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425174828.png" alt="状态"></p><blockquote><p>service mysql stop</p></blockquote><p>停止mysql服务</p><blockquote><p>service mysql start</p></blockquote><p>开启mysql服务</p><blockquote><p>service mysql restart</p></blockquote><p>重启mysql服务</p><blockquote><p>sudo systemctl enable mysql</p></blockquote><p>系统在重新引导（重启）之后，自动启动mysql服务</p><h1 id="配置远程登录"><a href="#配置远程登录" class="headerlink" title="配置远程登录"></a>配置远程登录</h1><h2 id="让linux防火墙允许mysql服务"><a href="#让linux防火墙允许mysql服务" class="headerlink" title="让linux防火墙允许mysql服务"></a>让linux防火墙允许mysql服务</h2><p><strong>7. 依次输入以下两条命令</strong></p><blockquote><p>sudo ufw enable</p></blockquote><blockquote><p>sudo ufw allow mysql</p></blockquote><p>依次是启用防火墙，防火墙允许mysql。</p><h2 id="绑定监听远程访问的接口"><a href="#绑定监听远程访问的接口" class="headerlink" title="绑定监听远程访问的接口"></a>绑定监听远程访问的接口</h2><p>默认情况下，mysql不绑定（监听）任何可远程访问的接口，需要编辑文件来设置。</p><p><strong>8. 输入以下命令来编辑配置文件</strong></p><blockquote><p>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</p></blockquote><p>进去之后点击i来进入insert模式，编辑完之后如下：</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425181043.png" alt="配置文件"></p><p>第一个是默认，第二个是可以让mysql监听的ip地址，填写你云服务器的ip就可以监听访问你云服务器的主机，当然你可以填写0.0.0.0来表示监听所有地址，这里全写了是为了演示，当然也没问题。(怕有人不会vim，想要保存并退出首先要esc退出insert模式，然后shift+:打开输入框，输入wq就可以保存并退出。)</p><h2 id="设置让某个host可以通过某个用户登录数据库"><a href="#设置让某个host可以通过某个用户登录数据库" class="headerlink" title="设置让某个host可以通过某个用户登录数据库"></a>设置让某个host可以通过某个用户登录数据库</h2><p><strong>9. 输入以下两条命令来以root通过密码登录数据库，并进入名字叫mysql的数据库。</strong></p><blockquote><p>sudo mysql -u root -p</p></blockquote><blockquote><p>use mysql</p></blockquote><p><strong>10. 输入以下两条命令来给数据库添加远程访问的权限</strong>。</p><blockquote><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘你的用户‘@’允许的host’ IDENTIFIED BY ‘远程登录密码’ WITH GRANT OPTION;</p></blockquote><blockquote><p>示例：GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;                ==//‘%’代表所有host都允许==</p></blockquote><h1 id="刷新并远程登录数据库"><a href="#刷新并远程登录数据库" class="headerlink" title="刷新并远程登录数据库"></a>刷新并远程登录数据库</h1><h1 id="刷新数据库"><a href="#刷新数据库" class="headerlink" title="刷新数据库"></a>刷新数据库</h1><p><strong>11. 在==输入sql语句处==输入以下指令来刷新用户权限有关内容。</strong></p><blockquote><p>FLUSH PRIVILEGES;</p></blockquote><p><strong>12. 输入exit退出mysql窗口，并在在==终端==输入以下内容来重新启动mysql服务。</strong></p><blockquote><p>service mysql restart</p></blockquote><h2 id="远程登录数据库"><a href="#远程登录数据库" class="headerlink" title="远程登录数据库"></a>远程登录数据库</h2><p><strong>finally</strong></p><p>在可以远程连接数据库的地方输入你的云服务器公网ip，默认mysql端口3306，以及user和password来测试登录是否成功。</p><p><img src="https://img-bucket-ca11m3g00d.oss-cn-beijing.aliyuncs.com/default/20210425184634.png" alt="远程连接"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> MySQL </tag>
            
            <tag> ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序算法</title>
      <link href="2021/03/31/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/31/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<i><p>notice:  </p><ul><li>为了方便语言形容，本文章默认是从小到大排序。</li></ul></i>  <h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><blockquote><p>插入排序算法把排序数组分为有序和无序两部分，一开始默认第一个元素为有序，之后每次一次插入操作都是把无序数组的第一个元素作为有序数组的一部分插入有序数组的对应位置，等无序数组的元素全部插入到有序数组之后，整个数组就是有序的。</p></blockquote><h1 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h1><pre class="line-numbers language-none"><code class="language-none">接受排序数组 arr[n]令i从1循环到n-1，对于每次循环：//数组分为有序部分arr[0]~arr[i-1]和无序部分arr[i]~arr[n-1]把无序部分的第一个arr[i]，插入到有序数组中的对应位置令i=i+1，若可以则继续循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">InsertionSorter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>        <span class="token comment">//要排序的数组</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadDefaultTestSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//加载默认的测试样例</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//根据已知数组来创建对象</span>        arr <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sortByInsertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//插入排序的主体</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> insertElem<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//要插入的元素，即无序部分的第一个</span>            <span class="token keyword">int</span> curIndex<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//遍历有序数组用的索引</span>            <span class="token comment">//反向遍历有序数组，只要当前元素大于要插入的元素，就让当前元素后移一位</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>curIndex<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token operator">&gt;</span>insertElem<span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>curIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                curIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>curIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertElem<span class="token punctuation">;</span> <span class="token comment">//将要插入的元素归位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//输出当前的数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构&amp;算法 </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序算法</title>
      <link href="2021/03/31/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/31/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<i><p>notice:  </p><ul><li>为了方便语言形容，本文章默认是从小到大排序。</li></ul></i>  <h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><blockquote><p>选择排序算法思路非常简单，选择排序算法把数组分为有序部分和无序部分，一开始整个数组都是无序的，每次选择操作将会选择无序数组的最小元素并放在无序数组的起始位置作为有序的元素，每次选择之后数组开头的有序元素就会多一个，等整个数组都是有序元素时，排序结束。</p></blockquote><h1 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h1><pre class="line-numbers language-none"><code class="language-none">接受排序数组 arr[n]令i从0循环到n-1，对于每次循环：找到arr[i]到arr[n-1]最小值的索引minIndex交换arr[i]和arr[minIndex]令i=i+1，若可以则继续循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SelectionSorter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>        <span class="token comment">//要排序的数组</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadDefaultTestSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//加载默认的测试样例</span>        arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//根据已知数组来创建对象</span>        arr <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sortBySelectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//选择排序的主体</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span>       <span class="token comment">//用于记录最小元素索引</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//minIndex替换规则开始</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//minIndex替换规则结束</span>            <span class="token punctuation">}</span>            <span class="token comment">//把最小元素交换到无序数组的第一个</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//输出当前的数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定性取决于写法</li></ul><h1 id="选择排序的稳定性分析"><a href="#选择排序的稳定性分析" class="headerlink" title="选择排序的稳定性分析"></a>选择排序的稳定性分析</h1><p>选择排序的稳定性取决于minIndex的替换规则，比如如下两种写法将带来不同的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种写法</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第二种写法</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一种写法是稳定的，对于相同的元素选取第一个</li><li>第二种写法是不稳定的，对于相同的元素会选取最后一个</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构&amp;算法 </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序算法</title>
      <link href="2021/03/31/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/31/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<i><p>notice:  </p><ul><li>为了方便语言形容，本文章默认是从小到大排序。</li></ul></i>  <h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><blockquote><p>冒泡排序把要排序的数组比喻为一个横向的池塘，把数组的第一个元素当作水底，最后一个元素当作水面。冒泡操作就是水底开始顺序检查水面之前所有的元素，比较每个元素和它后面一位元素的大小，如果这个元素小于它后面的元素，则交换二者。等程序运行到水面，则代表数组最大的元素（泡）已经被冒到了水面。这时候，让水面向前一位，再进行一遍冒泡操作，则第二大的元素就会被放到最大元素的前一位，如此循环，当水底==水面的时候，则数组就是有序的。</p></blockquote><h1 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h1><pre class="line-numbers language-none"><code class="language-none">接受排序数组 arr[n]令i从0循环到n-1，对于每次循环：令j从0循环到n-2-i，对于每次循环：//0为水底，n-1-i为当前水面，j最大设置为水面-1以防止数组索引溢出如果arr[j]&gt;arr[j+1]，则交换arr[j]和arr[j+1]令j=j+1，若可以则继续循环令i=i+1，若可以则继续循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BubbleSorter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>        <span class="token comment">//要排序的数组</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadDefaultTestSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//加载默认的测试样例</span>        arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//根据已知数组来创建对象</span>        arr <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sortByBubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//冒泡排序的主体</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//输出当前的数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><pre><code>- 时间复杂度：O(n^2)- 空间复杂度：O(1)- 稳定性：稳定</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构&amp;算法 </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Guide</title>
      <link href="2021/03/31/Markdown%20Guide/"/>
      <url>2021/03/31/Markdown%20Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-Guide"><a href="#Markdown-Guide" class="headerlink" title="Markdown Guide"></a><em><strong>Markdown Guide</strong></em></h1><hr><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a><strong>1. 标题</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 第一标题  </span><span class="token title important"><span class="token punctuation">##</span> 第二标题  </span><span class="token title important"><span class="token punctuation">###</span> 第三标题  </span><span class="token title important"><span class="token punctuation">####</span> 第四标题  </span><span class="token title important"><span class="token punctuation">#####</span> 第五标题  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第一标题"><a href="#第一标题" class="headerlink" title="第一标题"></a>第一标题</h1><h2 id="第二标题"><a href="#第二标题" class="headerlink" title="第二标题"></a>第二标题</h2><h3 id="第三标题"><a href="#第三标题" class="headerlink" title="第三标题"></a>第三标题</h3><h4 id="第四标题"><a href="#第四标题" class="headerlink" title="第四标题"></a>第四标题</h4><h5 id="第五标题"><a href="#第五标题" class="headerlink" title="第五标题"></a>第五标题</h5><hr><h1 id="2-换行"><a href="#2-换行" class="headerlink" title="2. 换行"></a><strong>2. 换行</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">直接回车\n直接回车末尾双空格<span class="token italic"><span class="token punctuation">_</span><span class="token content"> </span><span class="token punctuation">_</span></span>末尾双空格间隔一行间隔一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接回车<br>直接回车<br>末尾双空格<br>末尾双空格<br>间隔一行</p><p>间隔一行</p><hr><h1 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a><strong>3. 字体</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span>  <span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体</span><span class="token punctuation">**</span></span>  <span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span>上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span>  下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>斜体</em><br><strong>粗体</strong><br><em><strong>粗斜体</strong></em><br><del>删除线</del><br>上<sup>标</sup><br>下<sub>标<sub><br><u>下划线</u>    </sub></sub></p><hr><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a><strong>4.分割线</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">- - -</span>___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><hr><hr><h1 id="5-脚注"><a href="#5-脚注" class="headerlink" title="5. 脚注"></a><strong>5. 脚注</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">什么是脚注 [^1] ?<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> this</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>什么是脚注 [^1] ?<br>[^1]: this </p><hr><h1 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a><strong>6. 列表</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span>  <span class="token list punctuation">+</span> -有相同效果<span class="token list punctuation">+</span> 第一项    <span class="token list punctuation">+</span> 第二项        <span class="token list punctuation">+</span> 第三项<span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ul><li><ul><li>有相同效果  </li></ul></li></ul></li></ul><ul><li>第一项  <ul><li>第二项  <ul><li>第三项  </li></ul></li></ul></li></ul><ol><li>第一项  </li><li>第二项  </li></ol><hr><h1 id="7-区块"><a href="#7-区块" class="headerlink" title="7. 区块"></a><strong>7. 区块</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span>外层<span class="token blockquote punctuation">&gt;&gt;</span>中层<span class="token blockquote punctuation">&gt;&gt;&gt;</span>内层<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>外层</p><blockquote><p>中层</p><blockquote><p>内层</p></blockquote></blockquote></blockquote><hr><h1 id="8-代码"><a href="#8-代码" class="headerlink" title="8. 代码"></a><strong>8. 代码</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code keyword">`printf`</span>\```language(c、java)    code\```(取消掉\)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>printf("hello world");</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> test<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is a test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="9-链接"><a href="#9-链接" class="headerlink" title="9. 链接"></a><strong>9. 链接</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">github</span>](<span class="token url">www.github.com</span>)</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>www.github.com</span><span class="token punctuation">&gt;</span></span>  goto <span class="token url">[<span class="token content">github</span>][<span class="token variable">flag</span>]</span>  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">flag</span><span class="token punctuation">]</span><span class="token punctuation">:</span> www.github.com</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="www.github.com">github</a><br>&lt;<a href="http://www.github.com>/">www.github.com&gt;</a><br>goto [github][flag]<br>[flag]: <a href="http://www.github.com/">www.github.com</a> </p><hr><h1 id="10-表格"><a href="#10-表格" class="headerlink" title="10. 表格"></a><strong>10. 表格</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">|这一列左对齐|这一列居中对齐|这一列右对齐|  |:---|:---:|---:|  |单元格|单元格|单元格|  |单元格|单元格|单元格|  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">这一列左对齐</th><th align="center">这一列居中对齐</th><th align="right">这一列右对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="center">单元格</td><td align="right">单元格</td></tr><tr><td align="left">单元格</td><td align="center">单元格</td><td align="right">单元格</td></tr></tbody></table><hr><h1 id="11-图片"><a href="#11-图片" class="headerlink" title="11. 图片"></a><strong>11. 图片</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">alt</span>](<span class="token url">图片链接</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/.top//null" alt="alt"></p><hr><h1 id="12-其它"><a href="#12-其它" class="headerlink" title="12. 其它"></a><strong>12. 其它</strong></h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">&gt;</span></span>键盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kdb</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>粗体文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>斜体文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><kbd>键盘  </kbd></p><p><b>粗体文本</b>  </p><p><i>斜体文本</i></p><hr><h1 id="更多有待拓展"><a href="#更多有待拓展" class="headerlink" title="更多有待拓展"></a><em><strong>更多有待拓展</strong></em></h1>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
